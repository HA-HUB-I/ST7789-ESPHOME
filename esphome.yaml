esphome:
  name: st7789
  friendly_name: ST7789

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger: 
  # level: ERROR
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "oIR/Axg1bux1CHDUF+MnYgX6pqjzvm3saq/ChxMPjiU="

ota:
  - platform: esphome
    password: "58f1ad97054909a7bf2bc8575a3d429c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.1.50
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "St7789"
    password: "gNwdba4IHpeT"

captive_portal:

#hlk-LD2420
#tx_pin: GPIO4  # RX на HLK-LD2420
#rx_pin: GPIO5  # TX на HLK-LD2420
uart:
  tx_pin: GPIO17 # TX на HLK-LD2420
  rx_pin: GPIO16 # RX на HLK-LD2420
  baud_rate: 115200
  id: presence
  parity: NONE
  stop_bits: 1


# За да свържете ST7789V дисплей към ESP32, е важно да знаете следните пинове:
# VCC: Захранване (обикновено 3.3V или 5V).
# GND: Земя.
# SCL (SCK/CLK): Serial Clock - използва се за синхронизация на данните.
# SDA (MOSI): Serial Data - използва се за предаване на данни.
# DC (A0): Data/Command - определя дали изпращаните данни са команди или данни.
# RESET (RES): Reset - използва се за нулиране на дисплея.
# CS: Chip Select - използва се за избор на устройството в SPI комуникацията.
# BLK (LED): Backlight - контролира подсветката на дисплея. 

# SPI ST7789 TFT display // SCK pin на дисплее подключен к GPIO18  // MOSI pin на дисплее подключен к GPIO23
spi:
  clk_pin: GPIO18 
  mosi_pin: GPIO23

button:
  - platform: template
    name: "Buzzer Control"
    id: buzzer_button
    on_press:
      then:
        - output.set_level:
            id: buzzer_output
            level: 80%
        - delay: 200ms
        - output.set_level:
            id: buzzer_output
            level: 0%

  - platform: ld2420
    apply_config:
      name: Apply Config
    factory_reset:
      name: Factory Reset
    restart_module:
      name: Restart Module
    revert_config:
      name: Undo Edits

  - platform: template
    name: "buzzer script"
    on_press:
    - script.execute: buzzer_five       

font:
  - file: 'fonts/GoogleSans-Medium.ttf'
    id: font_16
    size: 30 
  - file: 'fonts/PressStart2P-Regular.ttf'
    id: font_15
  - file: "fonts/arial.ttf"
    id: font1
    size: 20
  - file: 'fonts/DejaVuSans.ttf'
    id: font_cyrillic
    size: 15
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ"
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_cyrillic_bold
    size: 35
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ"
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_bold
    size: 45
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_cyrillic_bold25
    size: 20
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ\u00B0"
      

output:
  - platform: ledc
    pin: GPIO4
    id: backlight_pwm

  - platform: ledc
    pin: GPIO14
    id: led_output 

  - platform: ledc
    pin: GPIO13
    id: buzzer_output
    frequency: 2730Hz  # Using a frequency that's good for audible beeps
    inverted: true
    
script: 
- id: buzzer_five # Use the same buzzer name you have given above. 
  then:
    - repeat:
          count: 5
          then:
            - output.turn_on: buzzer_output
            - delay: 500ms                
            - output.turn_off: buzzer_output
            - delay: 1000ms    

# power_supply:
#   - id: buzzer_power
#     keep_on_time: 0s
#     enable_time: 0s
#     pin:
#       number: GPIO12
#       inverted: true    
    
rtttl:
  - output: buzzer_output
    id: buzzer_rttl
    gain: 20%

switch:
  - platform: output
    name: "Buzzer Switch"
    output: buzzer_output
    id: buzzer_switch

ld2420: 
  uart_id: presence 

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON


  - platform: monochromatic
    output: led_output
    name: "LED Light"
    id: led_light
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100% 
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s    

time:
  - platform: homeassistant
    id: ha_time

text_sensor:
  
  - platform: homeassistant
    entity_id: sensor.vkhodna_vrata_door
    id: buildingdoor
    name: "Front Door Open"

  - platform: homeassistant
    id: weathertxt
    entity_id: weather.u_doma  
    
    
sensor:
  - platform: homeassistant
    id: weather
    entity_id: weather.u_doma
    attribute: temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
  - platform: homeassistant
    id: weatherwind
    entity_id: weather.u_doma #
    attribute: wind_speed
    unit_of_measurement: "m/s"
    device_class: "wind_speed"
    state_class: "measurement"
 

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor

  - platform: template
    name: "Uptime in Seconds"
    lambda: |-
      return id(uptime_sensor).state;
    unit_of_measurement: "s"
    update_interval: 60s

  - platform: template
    name: "Uptime in Minutes"
    lambda: |-
      return id(uptime_sensor).state / 60;
    unit_of_measurement: "min"
    update_interval: 60s


  - platform: template
    name: "Free Heap"
    id: free_heap
    lambda: |-
      return ESP.getFreeHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

  - platform: template
    name: "Min Free Heap"
    id: min_free_heap
    lambda: |-
      return ESP.getMinFreeHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

  - platform: template
    name: "Max Alloc Heap"
    id: max_alloc_heap
    lambda: |-
      return ESP.getMaxAllocHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

  - platform: ld2420
    moving_distance:
      name: "Moving Target"

   
        

binary_sensor:
  - platform: homeassistant
    id: vrata_sboard
    device_class: door
    entity_id: binary_sensor.vrata_sboard
    name: "Sboard Door Open"
    internal: False
    on_press: 
      then: 
        - lambda: |- 
            id(displayST).show_page(id(page1));
        - light.turn_on: 
            id: led_light
            effect: "Fast Pulse"
        - output.set_level:
            id: buzzer_output
            level: "50%"   
    on_release: 
      then:
        - lambda: |- 
            id(displayST).show_page(id(page0));
        - light.turn_off: led_light
        - output.turn_off: buzzer_output

  - platform: ld2420
    has_target:
      name: Presence

select:
  - platform: ld2420
    operating_mode:
      name: Operating Mode

number:
  - platform: ld2420
    presence_timeout:
      name: Detection Presence Timeout
    min_gate_distance:
      name: Detection Gate Minimum
    max_gate_distance:
      name: Detection Gate Maximum
    # See "Number" section below for detail
    gate_select:
      name: Select Gate to Set
    still_threshold:
      name: Set Still Threshold Value
    move_threshold:
      name: Set Move Threshold Value      
     


            
image:

  # - file: "imgs/close_door4.png"
  #   id: close_door
  #   type: RGBA

  - file: "imgs/alert.png"
    id: image_on
    type: RGBA

  - file: "imgs/alert.png"
    id: image_off
    type: RGBA

  - file: "imgs/alert.png"
    id: image_alert
    type: RGBA

  - file: "imgs/cloud.png"
    id: image_cloud
    type: RGBA

  - file: "imgs/cloud-small.png"
    id: image_cloud_small
    type: RGBA

  - file: "imgs/cloud-partly.png"
    id: image_cloud_partly
    type: RGBA

  - file: "imgs/cloud-partly-small.png"
    id: image_cloud_partly_small
    type: RGBA

  - file: "imgs/dot-green.png"
    id: image_dot_green
    resize: 14x14
    type: RGB24

  - file: "imgs/dot-orange.png"
    id: image_dot_orange
    resize: 14x14
    type: RGB24

  # - file: "imgs/okay.png"
  #   id: image_okay
  #   type: RGBA

  # - file: "imgs/sun.png"
  #   id: image_sun
  #   type: RGBA

  # - file: "imgs/sun-small.png"
  #   id: image_sun_small
  #   type: RGBA

  # - file: "imgs/night.png"
  #   id: image_night
  #   type: RGBA

  # - file: "imgs/night-small.png"
  #   id: image_night_small
  #   type: RGBA

  # - file: "imgs/attention.png"
  #   id: image_attention
  #   type: RGBA

  # - file: "imgs/attention-small.png"
  #   id: image_attention_small
  #   type: RGBA

  # - file: "imgs/fog.png"
  #   id: image_fog
  #   type: RGBA

  # - file: "imgs/fog-small.png"
  #   id: image_fog_small
  #   type: RGBA

  # - file: "imgs/hail.png"
  #   id: image_hail
  #   type: RGBA

  # - file: "imgs/hail-small.png"
  #   id: image_hail_small
  #   type: RGBA

  # - file: "imgs/lightning.png"
  #   id: image_lightning
  #   type: RGBA

  # - file: "imgs/lightning-small.png"
  #   id: image_lightning_small
  #   type: RGBA

  # - file: "imgs/rain.png"
  #   id: image_rain
  #   type: RGBA

  # - file: "imgs/rain-small.png"
  #   id: image_rain_small
  #   type: RGBA

  - file: "imgs/snow.png"
    id: image_snow
    type: RGBA

  - file: "imgs/snow-small.png"
    id: image_snow_small
    type: RGBA

  # - file: "imgs/wind.png"
  #   id: image_wind
  #   type: RGBA

  # - file: "imgs/wind-small.png"
  #   id: image_wind_small
  #   type: RGBA      

display:
  - platform: ili9xxx
    model: ST7789V
    dimensions:
      height: 170
      width: 320
      offset_height: 35
      offset_width: 0
    transform:
      swap_xy: true
      mirror_x: false
      mirror_y: true
    color_order: bgr
    invert_colors: true
    data_rate: 80MHz
    cs_pin: GPIO5
    dc_pin: GPIO19  #GPIO16
    reset_pin: GPIO21 #GPIO17
    id: displayST
    # it.printf(20, 70, id(font_16), Color(255, 0, 0), id(ha_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());

    # it.printf(160, 170, id(font1), TextAlign::CENTER, "Wind: %.1f m/s", id(weather).wind_speed);
    # lambda: |- 
    #   it.strftime(160, 10, id(font_16), TextAlign::CENTER, "%H:%M", id(ha_time).now());
    #   it.strftime(160, 50, id(font1), TextAlign::CENTER, "%d-%m-%Y", id(ha_time).now());
    #   if (id(weathertxt).state == "cloudy") {
    #     it.image(110, 60, id(image_cloud));
    #   } else if (id(weathertxt).state == "rainy") {
    #     it.image(110, 60, id(image_alert));
    #   } else {
    #     it.image(110, 60, id(image_on));
    #   }
    #   it.printf(160, 130, id(font_16), TextAlign::CENTER, "%.1f°C", id(weather).state); 
    #   it.printf(50, 10, id(font_cyrillic), TextAlign::CENTER, "%.1f m/s", id(weatherwind).state);
    #   static int scroll_pos = 0;
    #   scroll_pos++;
    #   if (scroll_pos > it.get_width()) scroll_pos = -50;  // Фиксирана стойност за ширината на текста "Вятър"
    #   it.print(scroll_pos, 10, id(font_cyrillic), "Вятър");
    pages: 
      - id: page0
        lambda: |- 
          it.strftime(160, 10, id(font_16), TextAlign::CENTER, "%H:%M", id(ha_time).now());
          it.strftime(160, 50, id(font1), TextAlign::CENTER, "%d-%m-%Y", id(ha_time).now());
          it.printf(250, 10, id(font_cyrillic_bold25), Color(255, 0, 0), TextAlign::CENTER, "%s", id(weathertxt).state.c_str()); 
          if (id(weathertxt).state == "cloudy") {
            it.image(110, 60, id(image_cloud));
          } else if (id(weathertxt).state == "rainy") {
            it.image(110, 50, id(image_alert));
            } else if (id(weathertxt).state == "snowy") {
            it.image(110, 40, id(image_snow));
          } else {
            it.image(110, 50, id(image_on));
          } 
          it.printf(280, 40, id(font_cyrillic_bold25), Color(255, 0, 0), TextAlign::CENTER, "%.1f°C", id(weather).state); 
          it.printf(50, 0, id(font_cyrillic), "Вятър");
          it.printf(60, 50, id(font_cyrillic_bold25), Color(255, 0, 0), TextAlign::CENTER, "%.1f к/ч", id(weatherwind).state);
          
      - id: page1
        lambda: |-     
          it.printf(160, 20, id(font_cyrillic_bold), TextAlign::CENTER, "МОЛЯ");
          it.printf(160, 50, id(font_cyrillic_bold), TextAlign::CENTER, "ЗАТВОРЕТЕ");
          it.printf(160, 100, id(font_cyrillic_bold), TextAlign::CENTER, "ВРАТАТА");

      




