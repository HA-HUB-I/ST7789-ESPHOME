esphome:
  name: st7789
  friendly_name: ST7789

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger: 
  # level: ERROR
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "oIR/Axg1bux1CHDUF+MnYgX6pqjzvm3saq/ChxMPjiU="

ota:
  - platform: esphome
    password: "58f1ad97054909a7bf2bc8575a3d429c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.1.50
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "St7789"
    password: "gNwdba4IHpeT"

captive_portal:

#hlk-LD2420
#tx_pin: GPIO4  # RX на HLK-LD2420
#rx_pin: GPIO5  # TX на HLK-LD2420
uart:
  tx_pin: GPIO17 # TX на HLK-LD2420 / 
  rx_pin: GPIO16 # RX на HLK-LD2420 / OT1 - Serial Tx (to ESP Rx)
  baud_rate: 115200
  id: presence
  parity: NONE
  stop_bits: 1


# За да свържете ST7789V дисплей към ESP32, е важно да знаете следните пинове:
# VCC: Захранване (обикновено 3.3V или 5V).
# GND: Земя.
# SCL (SCK/CLK): Serial Clock - използва се за синхронизация на данните.
# SDA (MOSI): Serial Data - използва се за предаване на данни.
# DC (A0): Data/Command - определя дали изпращаните данни са команди или данни.
# RESET (RES): Reset - използва се за нулиране на дисплея.
# CS: Chip Select - използва се за избор на устройството в SPI комуникацията.
# BLK (LED): Backlight - контролира подсветката на дисплея. 

# SPI ST7789 TFT display // SCK pin на дисплее подключен к GPIO18  // MOSI pin на дисплее подключен к GPIO23
spi:
  clk_pin: GPIO18 
  mosi_pin: GPIO23
  
select:
  - platform: ld2410
    distance_resolution:
      name: "distance resolution"
    baud_rate:
      name: "baud rate"
    light_function:
      name: light function
    out_pin_level:
      name: out pin level
button:
  - platform: template
    name: "Buzzer Control"
    id: buzzer_button
    on_press:
      then:
        - output.set_level:
            id: buzzer_output
            level: 80%
        - delay: 200ms
        - output.set_level:
            id: buzzer_output
            level: 0%

  - platform: ld2410
    factory_reset:
      name: "factory reset"
    restart:
      name: "restart"
    query_params:
      name: query params           


  - platform: template
    name: "buzzer script"
    on_press:
    - script.execute: door_unlocked_sound
  - platform: template
    name: "buzzer succes"
    on_press:
    - script.execute: buzzer_five
  - platform: template
    name: "buzzer error"
    on_press:
    - script.execute: error_sound             

font:
  - file: 'fonts/GoogleSans-Medium.ttf'
    id: font_16
    size: 30 
  - file: 'fonts/PressStart2P-Regular.ttf'
    id: font_15
  - file: "fonts/arial.ttf"
    id: font1
    size: 20
  - file: 'fonts/DejaVuSans.ttf'
    id: font_cyrillic
    size: 15
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ"
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_cyrillic_bold
    size: 35
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ"
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_bold
    size: 45
  - file: 'fonts/DejaVuSans-Bold.ttf'
    id: font_cyrillic_bold25
    size: 20
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЬЮЯабвгдежзийклмнопрстуфхцчшщъьюяёЁ\u00B0"
      

output:
  - platform: ledc
    pin: GPIO4
    id: backlight_pwm

  - platform: ledc
    pin: GPIO14
    id: led_output 

  - platform: ledc
    pin: GPIO13
    id: buzzer_output
    frequency: 2730Hz  # Using a frequency that's good for audible beeps
    inverted: true
    
script: 
- id: buzzer_five # Use the same buzzer name you have given above. 
  then:
    - repeat:
          count: 5
          then:
            - output.set_level:
               id: buzzer_output
               level: "50%"
            - delay: 500ms                
            - output.turn_off: buzzer_output
            - delay: 1000ms

- id: door_unlocked_sound
  then:
      - output.set_level:
          id: buzzer_output
          level: "50%"
      - delay: 200ms
      - output.turn_off: buzzer_output
      - delay: 100ms
      - output.set_level:
          id: buzzer_output
          level: "50%"
      - delay: 200ms
      - output.turn_off: buzzer_output

- id: error_sound
  then:
      - output.set_level:
          id: buzzer_output
          level: "50%"
      - delay: 100ms
      - output.turn_off: buzzer_output
      - delay: 100ms
      - output.set_level:
          id: buzzer_output
          level: "50%"
      - delay: 100ms
      - output.turn_off: buzzer_output
      - delay: 100ms
      - output.set_level:
          id: buzzer_output
          level: "50%"
      - delay: 100ms
      - output.turn_off: buzzer_output


# power_supply:
#   - id: buzzer_power
#     keep_on_time: 0s
#     enable_time: 0s
#     pin:
#       number: GPIO12
#       inverted: true    
    
rtttl:
  - output: buzzer_output
    id: buzzer_rttl
    gain: 20%

switch:
  - platform: output
    name: "Buzzer Switch"
    output: buzzer_output
    id: buzzer_switch

  - platform: ld2410
    engineering_mode:
      name: "engineering mode"
    bluetooth:
      name: "control bluetooth"    

ld2410: 
  uart_id: presence 

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON


  - platform: monochromatic
    output: led_output
    name: "LED Light"
    id: led_light
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100% 
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s    

time:
  - platform: homeassistant
    id: ha_time

text_sensor:
  
  - platform: homeassistant
    entity_id: sensor.vkhodna_vrata_door
    id: buildingdoor
    name: "Front Door Open"

  - platform: homeassistant
    id: weathertxt
    entity_id: weather.u_doma

  - platform: ld2410
    version:
      name: "firmware version"
    mac_address:
      name: "mac address"       
    
    
sensor:
  - platform: homeassistant
    id: weather
    entity_id: weather.u_doma
    attribute: temperature
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
  - platform: homeassistant
    id: weatherwind
    entity_id: weather.u_doma #
    attribute: wind_speed
    unit_of_measurement: "m/s"
    device_class: "wind_speed"
    state_class: "measurement"

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor

  - platform: template
    name: "Uptime in Seconds"
    lambda: |-
      return id(uptime_sensor).state;
    unit_of_measurement: "s"
    update_interval: 60s

  - platform: template
    name: "Uptime in Minutes"
    lambda: |-
      return id(uptime_sensor).state / 60;
    unit_of_measurement: "min"
    update_interval: 60s


  - platform: template
    name: "Free Heap"
    id: free_heap
    lambda: |-
      return ESP.getFreeHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

  - platform: template
    name: "Min Free Heap"
    id: min_free_heap
    lambda: |-
      return ESP.getMinFreeHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

  - platform: template
    name: "Max Alloc Heap"
    id: max_alloc_heap
    lambda: |-
      return ESP.getMaxAllocHeap();
    update_interval: 60s
    unit_of_measurement: "B"
    icon: "mdi:memory"

# LD2410
  - platform: ld2410
    light:
      name: light
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
    g0:
      move_energy:
        name: g0 move energy
      still_energy:
        name: g0 still energy
    g1:
      move_energy:
        name: g1 move energy
      still_energy:
        name: g1 still energy
    g2:
      move_energy:
        name: g2 move energy
      still_energy:
        name: g2 still energy
    g3:
      move_energy:
        name: g3 move energy
      still_energy:
        name: g3 still energy
    g4:
      move_energy:
        name: g4 move energy
      still_energy:
        name: g4 still energy
    g5:
      move_energy:
        name: g5 move energy
      still_energy:
        name: g5 still energy
    g6:
      move_energy:
        name: g6 move energy
      still_energy:
        name: g6 still energy
    g7:
      move_energy:
        name: g7 move energy
      still_energy:
        name: g7 still energy
    g8:
      move_energy:
        name: g8 move energy
      still_energy:
        name: g8 still energy  

external_components:
  - source:
      type: local
      path: components  
        

binary_sensor:
  - platform: homeassistant
    id: vrata_sboard
    device_class: door
    entity_id: binary_sensor.vrata_sboard
    name: "Sboard Door Open"
    internal: False
    on_press: 
      then: 
        - lambda: |- 
            id(displayST).show_page(id(page1));
        - light.turn_on: 
            id: led_light
            effect: "Fast Pulse"
        - output.set_level:
            id: buzzer_output
            level: "20%"   
    on_release: 
      then:
        - lambda: |- 
            id(displayST).show_page(id(page0));
        - light.turn_off: led_light
        - output.turn_off: buzzer_output

  - platform: homeassistant
    id: door_contact
    entity_id: binary_sensor.d1mini_sboard_door_contact_2
    name: "Door Contact"
    internal: False

  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
    out_pin_presence_status:
      name: out pin presence status

#GPIO26 за D0 и GPIO27 за D1
wiegand:
  d0: 33
  d1: 27
  # on_tag:
  #   then:
  #     - homeassistant.event:
  #         event: esphome.wiegand_card
  #         data:
  #           card_id: !lambda 'return x;'
  on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
  on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
  on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);          

      


number:
  - platform: ld2410
    timeout:
      name: timeout
    light_threshold:
      name: light threshold
    max_move_distance_gate:
      name: max move distance gate
    max_still_distance_gate:
      name: max still distance gate
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

  
     


            
image:

  - file: "imgs/111.png"
    id: close_door
    type: RGB

  - file: "imgs/alert.png"
    id: image_on
    type: RGB

  - file: "imgs/alert.png"
    id: image_off
    type: RGB

  - file: "imgs/alert.png"
    id: image_alert
    type: RGB

  - file: "imgs/cloud.png"
    id: image_cloud
    type: RGB

  - file: "imgs/cloud-small.png"
    id: image_cloud_small
    type: RGB

  - file: "imgs/cloud-partly.png"
    id: image_cloud_partly
    type: RGB

  - file: "imgs/cloud-partly-small.png"
    id: image_cloud_partly_small
    type: RGB

  - file: "imgs/dot-green.png"
    id: image_dot_green
    resize: 14x14
    type: RGB

  - file: "imgs/dot-orange.png"
    id: image_dot_orange
    resize: 14x14
    type: RGB

#weather status icon
  - file: mdi:alert-outline
    id: alert
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-sunny
    id: sunny
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-partly-cloudy
    id: partly_cloudy
    type: grayscale  
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-cloudy
    id: cloudy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-pouring
    id: raining
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-lightning
    id: thunder
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-snowy
    id: snow
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-fog
    id: fog
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-night
    id: clear_night
    type: grayscale
    transparency: alpha_channel
    resize: 80x80 
  - file: mdi:lan-connect
    id: connected
    type: grayscale
    transparency: alpha_channel
    resize: 20x20
  - file: mdi:lan-disconnect
    id: disconnected
    type: grayscale
    transparency: alpha_channel
    resize: 20x20    
  - file: mdi:motion-sensor
    id: motion
    type: grayscale
    transparency: alpha_channel
    resize: 20x20
  - file: mdi:door-open
    id: dooropen
    type: grayscale
    transparency: alpha_channel
    resize: 20x20
  - file: mdi:door-closed-lock
    id: doorclosedlock
    type: grayscale
    transparency: alpha_channel
    resize: 20x20  
  - file: mdi:weather-cloudy-alert
    id: weathercloudyalert
    type: grayscale
    transparency: alpha_channel
    resize: 80x80  
  - file: mdi:water-percent
    id: humidity
    type: grayscale
    transparency: alpha_channel
    resize: 30x30
  - file: mdi:thermometer
    id: temperature
    type: grayscale
    transparency: alpha_channel
    resize: 30x30        

display:
  - platform: ili9xxx
    model: ST7789V
    dimensions:
      height: 170
      width: 320
      offset_height: 35
      offset_width: 0
    transform:
      swap_xy: true
      mirror_x: false
      mirror_y: true
    color_order: bgr
    invert_colors: true
    data_rate: 80MHz
    cs_pin: GPIO5
    dc_pin: GPIO19  #GPIO16
    reset_pin: GPIO21 #GPIO17
    id: displayST
    # it.printf(20, 70, id(font_16), Color(255, 0, 0), id(ha_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());

    # it.printf(160, 170, id(font1), TextAlign::CENTER, "Wind: %.1f m/s", id(weather).wind_speed);
    # lambda: |- 
    #   it.strftime(160, 10, id(font_16), TextAlign::CENTER, "%H:%M", id(ha_time).now());
    #   it.strftime(160, 50, id(font1), TextAlign::CENTER, "%d-%m-%Y", id(ha_time).now());
    #   if (id(weathertxt).state == "cloudy") {
    #     it.image(110, 60, id(image_cloud));
    #   } else if (id(weathertxt).state == "rainy") {
    #     it.image(110, 60, id(image_alert));
    #   } else {
    #     it.image(110, 60, id(image_on));
    #   }
    #   it.printf(160, 130, id(font_16), TextAlign::CENTER, "%.1f°C", id(weather).state); 
    #   it.printf(50, 10, id(font_cyrillic), TextAlign::CENTER, "%.1f m/s", id(weatherwind).state);
    #   static int scroll_pos = 0;
    #   scroll_pos++;
    #   if (scroll_pos > it.get_width()) scroll_pos = -50;  // Фиксирана стойност за ширината на текста "Вятър"
    #   it.print(scroll_pos, 10, id(font_cyrillic), "Вятър");
    pages: 
      - id: page0
        lambda: |- 
          it.strftime(160, 10, id(font_16), TextAlign::CENTER, "%H:%M", id(ha_time).now());
          it.strftime(160, 150, id(font1), TextAlign::CENTER, "%d-%m-%Y", id(ha_time).now());
          if (id(weathertxt).state == "cloudy") {
            it.image(110, 60, id(cloudy));
          } else if (id(weathertxt).state == "rainy") {
            it.image(110, 50, id(image_alert));
            } else if (id(weathertxt).state == "snowy") {
            it.image(110, 40, id(snow));
            } else if (id(weathertxt).state == "partly_cloudy") {
            it.image(110, 40, id(partly_cloudy));
            } else if (id(weathertxt).state == "clear-night") {
            it.image(110, 40, id(clear_night), Color(0, 0, 255));
            } else if (id(weathertxt).state == "sunny") {
            it.image(110, 40, id(sunny), Color(255, 255, 0));
          } else {
            it.image(110, 50, id(weathercloudyalert));
          } 
          /* weather temperature and humanidity close left to image  */
          // Temperature
          it.image(190, 50, id(temperature), Color(240, 248, 255)); // Place image first
          it.printf(230, 50, id(font_cyrillic_bold25), TextAlign::LEFT, "%.1f°C", id(weather).state); // Then text

          // Wind speed
          it.image(190, 80, id(humidity), Color(240, 248, 255)); // Place image first
          it.printf(230, 80, id(font_cyrillic_bold25), TextAlign::LEFT, "%.1f m/s", id(weatherwind).state); // Then text

          if (id(wifi_connection) == true) {
            it.image(10, 10, id(connected), Color(0, 255, 0));
          } else {
            it.image(10, 10, id(disconnected), Color(255, 0, 0));
          }

          it.image(250, 10, id(motion), Color(255, 0, 0));
      - id: page1
        lambda: |-     
          it.image(110, 50, id(close_door));


      # it.printf(160, 20, id(font_cyrillic_bold), TextAlign::CENTER, "МОЛЯ");
          # it.printf(160, 50, id(font_cyrillic_bold), TextAlign::CENTER, "ЗАТВОРЕТЕ");
          # it.printf(160, 100, id(font_cyrillic_bold), TextAlign::CENTER, "ВРАТАТА");

globals: ##to set default reboot behavior
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
interval:
  - interval: 10s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;